#!/bin/bash

set -euo pipefail

DPKG="/usr/bin/dpkg"
MOUNT="/usr/bin/mount"
UMOUNT="/usr/bin/umount"
MKDIR="/usr/bin/mkdir"
RMDIR="/usr/bin/rmdir"
ID="/usr/bin/id"

function log_exec() {
	echo "$@"
	"$@"
}

# Which arch to upgrade
ARCH="${ARCH:-$(${DPKG} --print-architecture)}"

if [ "$EUID" != "0" ]; then
	echo "This command must be run as root."
	exit 1
fi

. /usr/share/cluster-netboot/load-config.sh
if [ -z "$CLUSTER_NFS_SERVER" ]; then
	CLUSTER_NFS_SERVER="$(cluster_nfs_server_resolved /)"
fi

case "$ARCH" in
armhf)
	NFS_ROOT_PATH="$CLUSTER_NFS_ROOT_ARMHF_PATH";;
arm64)
	NFS_ROOT_PATH="$CLUSTER_NFS_ROOT_ARM64_PATH";;
esac

ROOT_DIR="/tmp/recursive_root_${ARCH}"
log_exec $MKDIR "$ROOT_DIR"

log_exec $MOUNT -t nfs -o rw "${CLUSTER_NFS_SERVER}:${NFS_ROOT_PATH}" "$ROOT_DIR"

# Mount the various special filesystems
for FS in dev sys proc; do
	log_exec $MOUNT --rbind /${FS} "${ROOT_DIR}/${FS}"
	log_exec $MOUNT --make-rslave "${ROOT_DIR}/${FS}"
done

# Mount firmware directories
log_exec $MOUNT -t nfs -o rw "${CLUSTER_NFS_SERVER}:${CLUSTER_NFS_NETBOOT_PATH}" ${ROOT_DIR}/boot/netboot
if [ -d /boot/firmware ]; then
	log_exec $MOUNT --bind /boot/firmware ${ROOT_DIR}/boot/firmware
	log_exec $MOUNT --make-rslave ${ROOT_DIR}/boot/firmware
fi

chroot ${ROOT_DIR} /bin/bash

log_exec $UMOUNT -R "$ROOT_DIR"
log_exec $RMDIR "$ROOT_DIR"
