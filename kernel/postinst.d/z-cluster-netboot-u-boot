#!/bin/sh

set -e
exec </dev/null >&2

VERSION="$1"
NETBOOTDIR="/boot/netboot"

msg_err() {
	echo >&2 "E: cluster-netboot-u-boot: $1"
	exit $2
}

msg_info() {
	echo >&2 "I: cluster-netboot-u-boot: $1"
}

# I'm not sure why, but DPKG_MAINTSCRIPT_ARCH is "all"...
_CLUSTER_NETBOOT_ARCH="$(dpkg --print-architecture)"

if ! [ -d "${NETBOOTDIR}" ]; then
	# Violating Debian kernel hook guidelines for bootloaders (sec 8.2 in the
	# Debian Linux Kernel Handbook) by exiting with a non-0 status when the
	# bootloader is "disabled". In this case, I *want* to be alerted that the
	# "bootloader" isn't being updated properly.
	msg_err "/boot/netboot is not mounted" 3
fi

if [ -z "${VERSION}" ]; then
	msg_err "No kernel version given" 2
fi

# Cribbed from the initramfs-tools postinst script.
# This avoids running the script mutliple times (see Debian Policy manual 
# section 6.5 for the various arguments a postrm script can be given).
if [ -n "$DEB_MAINT_PARAMS" ]; then
	# This will clobber the old script parameters, but that's alright as they're
	# already saved.
	eval set -- "$DEB_MAINT_PARAMS"
	if [ -z "$1" ] || [ "$1" != "configure" ]; then
		exit 0
	fi
fi

. /usr/share/cluster-netboot/load-config.sh

UENV_TXT="uEnv-${_CLUSTER_NETBOOT_ARCH}.txt"
msg_info "Updating current kernel in ${UENV_TXT}"
echo >"${NETBOOTDIR}/${UENV_TXT}" <<EOF
# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT!
boot_prefix=/kernel-${VERSION}-${_CLUSTER_NETBOOT_ARCH}
EOF

# TODO: Add some "smarts" to this so that it can check the change time (with
# `stat`) and compare that to the creation time of the U-Boot image (accessible
# as a UTC timestamp with `mkimage -l`).
msg_info "Creating U-Boot boot script."
# Instead of a legacy U-Boot image, which I'm a bit uncertain can support both
# 32 and 64 bit architectures in one file, I'm creating the fancy new FIT. It's
# basically a device tree-style description of the image.
mkimage \
	-f /usr/share/cluster-netboot/combined-image.its \
	"${NETBOOTDIR}/${CLUSTER_UBOOT_SCRIPT_NAME}" \
	>&2