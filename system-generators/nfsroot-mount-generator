#!/bin/sh

set -e

# This is a systemd generator that creates the root mount file ("-.mount") for
# the nodes in a netbooting ARM cluster. It reads configuration from
# /etc/defaults/cluster-netboot (default values are also handled appropriately).

# Put another way, this is adding a little bit of smarts to
# systemd-fstab-generator, so that it also understands nfsroot= in addition to
# root= on the kernel command line.

OUTPUT_DIR="$1"

# The format for the nfsroot parameter, taken from nfsroot.txt from the kernel
# documentation:
# nfsroot=[<server-ip>:]<root-dir>[,<nfs-options>]
# * <server-ip> is determined from the `ip` command line parameter. The value
#   for <server-ip> is supposed to be available at /proc/net/pnp, prefixed with
#   "bootserver ".
# * <root-dir> is the directory on the server to mount at /. If there is a "%s"
#   in the string, it is replaced with "the ASCII-representation of the client's
#   IP address". The default value is "/tftpboot/%s"
# * <nfs-options> are standard NFS options, all separated by commas. The
#   defaults are listed in the kernel documentation.

# Debian does nfsroot a bit differently; instead of compiling in CONFIG_IP_PNP
# and CONFIG_ROOT_NFS, it's all done in initramfs. A consequence of this is
# that there is no /proc/net/pnp on these systems. Ubuntu on the other hand
# *does* include CONFIG_IP_PNP, but not CONFIG_ROOT_NFS. It also does the actual
# mounting of root from the initramfs.

# shell-ified version of basic/parse-util.c:parse_boolean() from the systemd
# sources.
parse_bool() {
	# Slight difference in operation: instead of -EINVAL (or negative values in
	# general), this function returns 255 for error conditions as POSIX "return"
	# doesn't support signed integers (or integers over 255).
	TRUE_VALUES="1 yes y true t on"
	FALSE_VALUES="0 no n false f off"
	OLDIFS="$IFS"
	IFS=" "
	for V in $TRUE_VALUES; do
		if [ "$V" = "$1" ]; then
			IFS="$OLDIFS"
			return 1
		fi
	done
	for V in $FALSE_VALUES; do
		if [ "$V" = "$1" ]; then
			IFS="$OLDIFS"
			return 0
		fi
	done
	# Unrecognized input
	IFS="$OLDIFS"
	return 255
}

# shell-ified version of basic/util.c:in_initrd() (and associated functions)
# from the systemd sources.
in_initrd() {
	# Rely on sudo to sanitize environment variables (as I don't want to
	# reimplement getenv_secure in shell script).
	ENV_IN_INITRD=$(parse_bool "$SYSTEMD_IN_INITRD")
	if [ $ENV_IN_INITRD -eq 255 ]; then
		# NOTE: *not* doing the extra check from in_initrd() (that it's a tmpfs)
		[ -f "/etc/initrd-release" ]
		return
	else
		return $ENV_IN_INITRD
	fi
}

if in_initrd(); then
	ROOT_MOUNTPOINT="/sysroot"
else
	ROOT_MOUNTPOINT="/"
fi
# Assume the root FS is already mounted by now.
NFS_REGEX="^\([^ ]\+\) ${ROOT_MOUNTPOINT} nfs \(.*\) [0-9] [0-9]"
NFS_ROOT="$(grep -o -e "$NFS_REGEX" /proc/mounts)"
if [ "$NFS_ROOT" = "" ]; then
	echo "Root is not mounted over NFS, exiting."
	exit 0
fi

ROOT_MOUNT="$(echo "$NFSROOT" | sed s@"${NFS_REGEX}"@'\1'@)"
ROOT_OPTIONS="$(echo "$NFSROOT" | sed s@"${NFS_REGEX}"@'\2'@)"

cat >"${OUTPUT_DIR}/-.mount" <<EOF
# Automatically generated by $(basename "$0")

[Unit]
Description=Declare the root mount point for a netbooted node in the cluster.
SourcePath=/proc/cmdline

[Mount]
Where=/
What=${ROOT_MOUNT}
Type=nfs
Options=${ROOT_OPTIONS}
EOF