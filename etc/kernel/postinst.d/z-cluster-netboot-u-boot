#!/bin/sh

set -e
exec </dev/null >&2

VERSION="$1"
NETBOOTDIR="/boot/netboot"

msg_err() {
	echo >&2 "E: cluster-netboot-u-boot: $1"
	exit $2
}

msg_warn() {
	echo >&2 "W: cluster-netboot-u-boot: $1"
}

msg_info() {
	echo >&2 "I: cluster-netboot-u-boot: $1"
}

# I'm not sure why, but DPKG_MAINTSCRIPT_ARCH is "all"...
_CLUSTER_NETBOOT_ARCH="$(dpkg --print-architecture)"

# Violating Debian kernel hook guidelines for bootloaders (sec 8.2 in the
# Debian Linux Kernel Handbook) by exiting with a non-0 status when the
# bootloader is "disabled". In this case, I *want* to be alerted that the
# "bootloader" isn't being updated properly.
if [ ! -d "${NETBOOTDIR}" ]; then
	msg_err "/boot/netboot is not mounted" 3
elif [ ! -w "${NETBOOTDIR}" ]; then
	msg_err "/boot/netboot is not writable" 4
fi

if [ -z "${VERSION}" ]; then
	msg_err "No kernel version given" 2
fi

# Cribbed from the initramfs-tools postinst script.
# This avoids running the script mutliple times (see Debian Policy manual 
# section 6.5 for the various arguments a postrm script can be given).
if [ -n "$DEB_MAINT_PARAMS" ]; then
	# This will clobber the old script parameters, but that's alright as they're
	# already saved.
	eval set -- "$DEB_MAINT_PARAMS"
	if [ -z "$1" ] || [ "$1" != "configure" ]; then
		exit 0
	fi
fi

. /usr/share/cluster-netboot/load-config.sh

UENV_TXT="uEnv-${_CLUSTER_NETBOOT_ARCH}.txt"
msg_info "Updating current kernel in ${UENV_TXT}"
cat >"${NETBOOTDIR}/${UENV_TXT}" <<EOF
# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT!
boot_prefix=/kernel-${VERSION}-${_CLUSTER_NETBOOT_ARCH}
EOF

# Compare the script source file and the script image, creating the image file
# only if the image file is outdated.
SCRIPT_SOURCE="/usr/share/cluster-netboot/u-boot-script.txt"
SCRIPT_DESTINATION="${NETBOOTDIR}/${CLUSTER_UBOOT_SCRIPT_NAME}"
# Using input redirection so the output of sha1sum has "-" for the filename
SOURCE_HASH="$(sha1sum < "$SCRIPT_SOURCE")"
DESTINATION_HASH=
if [ -f "$SCRIPT_DESTINATION" ]; then
	# Cutting off the first 72 bytes strips the U-Boot image header off,
	# leaving just the script contents.
	DESTINATION_HASH="$(tail -c +73 "$SCRIPT_DESTINATION" | sha1sum)"
fi
if [ -x /usr/bin/mkimage ] && [ "$SOURCE_HASH" != "$DESTINATION_HASH" ]; then
	if [ ! -f "$SCRIPT_DESTINATION" ]; then
		msg_info "Creating U-Boot boot script."
	else
		msg_info "Updating U-Boot boot script."
	fi
	# Create a legacy U-Boot script image with dummy values for the OS and
	# architecture. Those two fields shouldn't matter to U-Boot when it loads
	# the file, and they fit better semantically than the defaults of a PowerPC
	# Linux image. A legacy image is also used as older U-Boot versions may not
	# support FIT images, or may not support the default property for scripts in
	# FIT images.
	mkimage \
		-T script \
		-O u-boot \
		-A invalid \
		-d "$SCRIPT_SOURCE" \
		"$SCRIPT_DESTINATION" \
		>&2
else
	if [ ! -x /usr/bin/mkimage ]; then
		msg_warn "/usr/bin/mkimage isn't installed."
	else
		msg_info "U-Boot script current, skipping update."
	fi
fi
