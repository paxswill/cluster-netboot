#!/bin/sh
# config script for cluster-netboot
#
# for more details, see:
# - debconf-devel(7)
# - confmodule(3)
# - dh_installdebconf(1)

# The parameter expansion here is to allow overriding the config file during
# development.
: ${CONFIGFILE:=/etc/cluster-netboot/config}

set -e

. /usr/share/debconf/confmodule
db_capb backup

# Load an existing config file and update debconf with changes made in it
if [ -e "$CONFIGFILE" ]; then
	. "$CONFIGFILE" || true
	CONFITEMS="
	NFS_SERVER NFS_BASE_PATH ISCSI_INITIATOR ISCSI_TARGET
	NFS_ROOT_ARMHF_PATH NFS_ROOT_ARM64_PATH NFS_NETBOOT_PATH
	UBOOT_SCRIPT_NAME RASPI_EXTRA_CMDLINE
	"
	for config_item in $CONFITEMS; do
		# Using parameter expansion to work around the lack of the '-v' test
		# from bash in POSIX shell.
		if eval "[ -n \"\${CLUSTER_${config_item}+sentinel}\" ]"; then
			# This branch means CLUSTER_${config_item} is set (but might be
			# null!).
			eval existing_value="\$CLUSTER_${config_item}"
			db_set cluster-netboot/CLUSTER_${config_item} "$existing_value"
		else
			db_reset cluster-netboot/CLUSTER_${config_item}
		fi
	done
fi

state_go() {
	OLD_STATE=$STATE
	if db_go; then
		STATE=$NEXT_STATE
	else
		STATE=$PREV_STATE
	fi
}

unset_question() {
	# only argument is the full question name
	db_reset $1
	db_fset $1 seen false
}

# This case is common enough to be pulled into its own function
unset_if_empty() {
	# One argument; the full question name
	db_get $1
	if [ -z "$RET" ]; then
		unset_question $1
	fi
}

# Also common enough to merit being pulled into a function
require_set() {
	# One argument; the full question name
	db_get $1
	if [ -z "$RET" ]; then
		# TODO: show a message saying that this is invalid
		# Just set the old status back
		STATE=$OLD_STATE
	fi
}

STATE=NFS_SERVER
while true; do
	case "$STATE" in
	NFS_SERVER)
		PREV_STATE=
		QUESTION=cluster-netboot/CLUSTER_NFS_SERVER
		db_input medium $QUESTION || true
		NEXT_STATE=NFS_BASE_PATH
		state_go
		unset_if_empty $QUESTION
	;;
	NFS_BASE_PATH)
		PREV_STATE=NFS_SERVER
		QUESTION=cluster-netboot/CLUSTER_NFS_BASE_PATH
		set +e
		db_input critical $QUESTION
		input_status=$?
		set -e
		NEXT_STATE=ISCSI_INITIATOR
		state_go
		# We can only validate the input if the user actually sees the question.
		if [ $input_status -ne 30 ]; then
			require_set $QUESTION
		fi
	;;
	ISCSI_INITIATOR)
		PREV_STATE=NFS_BASE_PATH
		QUESTION=cluster-netboot/CLUSTER_ISCSI_INITIATOR
		set +e
		db_input critical $QUESTION
		input_status=$?
		set -e
		NEXT_STATE=ISCSI_TARGET
		state_go
		# We can only validate the input if the user actually sees the question.
		if [ $input_status -ne 30 ]; then
			require_set $QUESTION
		fi
	;;
	ISCSI_TARGET)
		PREV_STATE=ISCSI_INITIATOR
		QUESTION=cluster-netboot/CLUSTER_ISCSI_TARGET
		# The default value of CLUSTER_ISCSI_TARGET is CLUSTER_ISCSI_INITIATOR
		db_get cluster-netboot/CLUSTER_ISCSI_INITIATOR
		db_set $QUESTION "$RET"
		db_input low cluster-netboot/CLUSTER_ISCSI_TARGET || true
		NEXT_STATE=ROOT_ARMHF
		state_go
		unset_if_empty $QUESTION
	;;
	ROOT_ARMHF)
		PREV_STATE=ISCSI_TARGET
		db_get cluster-netboot/CLUSTER_NFS_BASE_PATH
		nfs_base_path="$RET"
		QUESTION=cluster-netboot/CLUSTER_NFS_ROOT_ARMHF_PATH
		db_input medium $QUESTION || true
		NEXT_STATE=ROOT_ARM64
		state_go
		unset_if_empty $QUESTION
	;;
	ROOT_ARM64)
		PREV_STATE=ROOT_ARMHF
		db_get cluster-netboot/CLUSTER_NFS_BASE_PATH
		nfs_base_path="$RET"
		QUESTION=cluster-netboot/CLUSTER_NFS_ROOT_ARM64_PATH
		db_input medium $QUESTION || true
		NEXT_STATE=NETBOOT
		state_go
		unset_if_empty $QUESTION
	;;
	NETBOOT)
		PREV_STATE=ROOT_ARM64
		db_get cluster-netboot/CLUSTER_NFS_BASE_PATH
		nfs_base_path="$RET"
		QUESTION=cluster-netboot/CLUSTER_NFS_NETBOOT_PATH
		db_input medium $QUESTION || true
		NEXT_STATE=UBOOT_SCRIPT_NAME
		state_go
		unset_if_empty $QUESTION
	;;
	UBOOT_SCRIPT_NAME)
		PREV_STATE=NETBOOT
		QUESTION=cluster-netboot/CLUSTER_UBOOT_SCRIPT_NAME
		db_input low $QUESTION || true
		NEXT_STATE=RASPI_EXTRA_CMDLINE
		state_go
		unset_if_empty $QUESTION
	;;
	RASPI_EXTRA_CMDLINE)
		PREV_STATE=UBOOT_SCRIPT_NAME
		QUESTION=cluster-netboot/CLUSTER_RASPI_EXTRA_CMDLINE
		db_input low $QUESTION || true
		NEXT_STATE=
		state_go
	;;
	*)
		break
	;;
	esac
	if [ -z "$STATE" ]; then
		break
	fi
done

#DEBHELPER#

exit 0
