#!/bin/sh

set -e
exec </dev/null >&2

# Remove old kernel files from the netboot filesystem.

VERSION="$1"
NETBOOTDIR="/boot/netboot"

msg_err() {
	echo >&2 "E: netboot: $1"
	exit $2
}

msg_warn() {
	echo >&2 "W: netboot: $1"
}

msg_info() {
	echo >&2 "I: netboot: $1"
}

if [ -z "${VERSION}" ]; then
	# Following the example from postrm.d/initramfs-tools and returning 0 for a 
	# missing version.
	msg_warn "No kernel version given"
	exit 0
fi


if ! [ -d "${NETBOOTDIR}" ]; then
	# Violating Debian kernel hook guidelines for bootloaders (sec 8.2 in the
	# Debian Linux Kernel Handbook) by exiting with a non-0 status when the
	# bootloader is "disabled". In this case, I *want* to be alerted that the
	# "bootloader" isn't being updated properly.
	msg_err "/boot/netboot is not mounted" 3
fi

# Cribbed from the initramfs-tools postrm script.
# This avoids running the script mutliple times (see Debian Policy manual 
# section 6.5 for the various arguments a postrm script can be given).
if [ -n "$DEB_MAINT_PARAMS" ]; then
	# This will clobber the old script parameters, but that's alright as they're
	# already saved.
	eval set -- "$DEB_MAINT_PARAMS"
	if [ -z "$1" ] || [ "$1" != "remove" ]; then
		exit 0
	fi
fi

KERNELDIR="${NETBOOTDIR}/kernel-${VERSION}-${DPKG_MAINTSCRIPT_ARCH}"

for FILENAME in vmlinuz System.map config initrd.img; do
	FILE="${KERNELDIR}/${FILENAME}"
	if [ -f "$FILE" ]; then
		msg_info "Removing ${KERNELDIR}/${FILE}"
		rm "${FILE}"
	else
		msg_warn "${FILE} was not found, skipping"
	fi
done

msg_info "Removing device tree files..."
find "${KERNELDIR}" -name '*.dtb' -print -delete

msg_info "Removing ${KERNELDIR}"
if ! rmdir "${KERNELDIR}"; then
	msg_warn "${KERNELDIR} is not empty"
fi